import cv2
import numpy as np
import math
import matplotlib.pyplot as plt

blur_ksize = 5  # Gaussian blur kernel size
canny_lthreshold = 50  # Canny edge detection low threshold
canny_hthreshold = 150  # Canny edge detection high threshold

# Hough transform parameters
rho = 1#rho的步长，即直线到图像原点(0,0)点的距离
theta = np.pi / 180#theta的范围
threshold = 15#累加器中的值高于它时才认为是一条直线
min_line_length = 40#线的最短长度，比这个短的都被忽略
max_line_gap = 20#两条直线之间的最大间隔，小于此值，认为是一条直线


def get_change(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blur_gray = cv2.GaussianBlur(gray, (blur_ksize, blur_ksize), 0, 0)  # 使用高斯模糊去噪声
    edges = cv2.Canny(blur_gray, 50, 200, apertureSize=3)
    # lines = cv2.HoughLines(edges, 1, np.pi/180, 118)
    lines = cv2.HoughLinesP(edges, 1, np.pi/180, 30, minLineLength=100, maxLineGap=10)
    lines1 = lines[:, 0, :]
    for x1, y1, x2, y2 in lines1[:]:
        if 60 < math.fabs(math.atan2(y2-y1, x2-x1)*180/math.pi) < 150:
            cv2.line(img, (x1, y1), (x2, y2), (255, 0, 0), 1)
    return img


def CV2():
    cap = cv2.VideoCapture(r'C:\Users\0ng\Downloads\03.avi')

    while(cap.isOpened()):
        ret, frame = cap.read()
        # img = cv2.imread(r'C:\Users\0ng\Desktop\1.png')
        frame = get_change(frame)
        cv2.imshow('frame', frame)
        if cv2.waitKey(25) & 0xFF == ord('q'):
            break

    cap.release()

    # cv2.imshow('gray', edges)
    # cv2.imshow('Result', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


class Thresholding:
    def abs_sobel_thresh(self, img, orient='x', thresh_min=0, thresh_max=255):
        # 装换为灰度图片
        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
        # 使用cv2.Sobel()计算计算x方向或y方向的导数
        if orient == 'x':
            abs_sobel = np.absolute(cv2.Sobel(gray, cv2.CV_64F, 1, 0))
        elif orient == 'y':
            abs_sobel = np.absolute(cv2.Sobel(gray, cv2.CV_64F, 0, 1))
        # 阈值过滤
        scaled_sobel = np.float32(255 * abs_sobel / np.max(abs_sobel))
        # print(scaled_sobel)
        binary_output = np.zeros_like(scaled_sobel)
        # print(binary_output)
        binary_output[(scaled_sobel >= thresh_min) & (scaled_sobel <= thresh_max)] = 1
        return binary_output

    def mag_thresh(self, img, sobel_kernel=3, mag_thresh=(0, 255)):
        # Convert to grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
        # Take both Sobel x and y gradients
        sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=sobel_kernel)
        sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=sobel_kernel)
        # Calculate the gradient magnitude
        gradmag = np.sqrt(sobelx ** 2 + sobely ** 2)
        # Rescale to 8 bit
        scale_factor = np.max(gradmag) / 255
        gradmag = (gradmag / scale_factor).astype(np.uint8)
        # Create a binary image of ones where threshold is met, zeros otherwise
        binary_output = np.zeros_like(gradmag)
        binary_output[(gradmag >= mag_thresh[0]) & (gradmag <= mag_thresh[1])] = 1

        # Return the binary image
        return binary_output

    def dir_threshold(self, img, sobel_kernel=3, thresh=(0, np.pi / 2)):
        # Grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
        # Calculate the x and y gradients
        sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=sobel_kernel)
        sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=sobel_kernel)
        # Take the absolute value of the gradient direction,
        # apply a threshold, and create a binary image result
        absgraddir = np.arctan2(np.absolute(sobely), np.absolute(sobelx))
        binary_output = np.zeros_like(absgraddir)
        binary_output[(absgraddir >= thresh[0]) & (absgraddir <= thresh[1])] = 1

        # Return the binary image
        return binary_output

    def hls_select(self, img, channel='s', thresh=(0, 255)):
        hls = cv2.cvtColor(img, cv2.COLOR_RGB2HLS)
        if channel == 'h':
            channel = hls[:, :, 0]
        elif channel == 'l':
            channel = hls[:, :, 1]
        else:
            channel = hls[:, :, 2]
        binary_output = np.zeros_like(channel)
        binary_output[(channel > thresh[0]) & (channel <= thresh[1])] = 1
        return binary_output

    def luv_select(self, img, thresh=(0, 255)):
        luv = cv2.cvtColor(img, cv2.COLOR_RGB2LUV)
        l_channel = luv[:, :, 0]
        binary_output = np.zeros_like(l_channel)
        binary_output[(l_channel > thresh[0]) & (l_channel <= thresh[1])] = 1
        return binary_output

    def lab_select(self, img, thresh=(0, 255)):
        lab = cv2.cvtColor(img, cv2.COLOR_RGB2Lab)
        b_channel = lab[:, :, 2]
        binary_output = np.zeros_like(b_channel)
        binary_output[(b_channel > thresh[0]) & (b_channel <= thresh[1])] = 1
        return binary_output

    def thresholding(self, img):
        x_thresh = self.abs_sobel_thresh(img, orient='x', thresh_min=10, thresh_max=230)
        mag_thresh_ = self.mag_thresh(img, sobel_kernel=3, mag_thresh=(30, 150))
        dir_thresh = self.dir_threshold(img, sobel_kernel=3, thresh=(0.7, 1.3))
        hls_thresh = self.hls_select(img, thresh=(180, 255))
        lab_thresh = self.lab_select(img, thresh=(155, 200))
        luv_thresh = self.luv_select(img, thresh=(225, 255))
        # Thresholding combination
        threshholded = np.zeros_like(x_thresh)
        threshholded[
            ((x_thresh == 1) & (mag_thresh_ == 1)) | ((dir_thresh == 1) & (hls_thresh == 1)) | (lab_thresh == 1) | (
                        luv_thresh == 1)] = 1

        return threshholded

    def run(self):
        cap = cv2.VideoCapture(r'C:\Users\0ng\Downloads\03.avi')

        while(cap.isOpened()):
            ret, frame = cap.read()
            # img = cv2.imread(r'C:\Users\0ng\Desktop\1.png')
            frame = self.thresholding(frame)
            cv2.imshow('frame', frame)
            if cv2.waitKey(25) & 0xFF == ord('q'):
                break

        cap.release()

        # img = cv2.imread(r"C:\Users\0ng\Desktop\1.png")
        # x_thresh = thresholding(img)
        #
        # cv2.imshow("img", img)
        # cv2.imshow("result", x_thresh)
        cv2.waitKey()
        cv2.destroyAllWindows()


class Perspective_transform():
    def get_moust(self, img):
        def on_EVENT_LBUTTONDOWN(event, x, y, flags, param):
            if event == cv2.EVENT_LBUTTONDOWN:
                xy = "%d,%d" % (x, y)
                cv2.circle(img, (x, y), 1, (255, 0, 0), thickness=-1)
                cv2.putText(img, xy, (x, y), cv2.FONT_HERSHEY_PLAIN,
                            1.0, (0, 0, 0), thickness=1)
                cv2.imshow("image", img)

        cv2.namedWindow("image")
        cv2.setMouseCallback("image", on_EVENT_LBUTTONDOWN)
        cv2.imshow("image", img)
        cv2.waitKey()
        cv2.destroyAllWindows()

    def get_M_Minv(self):
        # src = np.float32([[(203, 720), (585, 460), (695, 460), (1127, 720)]])
        # dst = np.float32([[(320, 720), (320, 0), (960, 0), (960, 720)]])
        # src = np.float32([[(2, 275), (166, 156), (294, 156), (353, 280)]])
        src = np.float32([[(176, 476), (234, 190), (356, 200), (568, 480)]])
        dst = np.float32([[(320, 476), (320, 0), (500, 0), (500, 360)]])
        M = cv2.getPerspectiveTransform(src, dst)
        Minv = cv2.getPerspectiveTransform(dst, src)
        return M, Minv

    def find_line(self, binary_warped):
        # Take a histogram of the bottom half of the image
        histogram = np.sum(binary_warped[binary_warped.shape[0] // 2:, :], axis=0)
        # Find the peak of the left and right halves of the histogram
        # These will be the starting point for the left and right lines
        midpoint = np.int(histogram.shape[0] / 2)
        leftx_base = np.argmax(histogram[:midpoint])
        rightx_base = np.argmax(histogram[midpoint:]) + midpoint

        # Choose the number of sliding windows
        nwindows = 9
        # Set height of windows
        window_height = np.int(binary_warped.shape[0] / nwindows)
        # Identify the x and y positions of all nonzero pixels in the image
        nonzero = binary_warped.nonzero()
        nonzeroy = np.array(nonzero[0])
        nonzerox = np.array(nonzero[1])
        # Current positions to be updated for each window
        leftx_current = leftx_base
        rightx_current = rightx_base
        # Set the width of the windows +/- margin
        margin = 100
        # Set minimum number of pixels found to recenter window
        minpix = 50
        # Create empty lists to receive left and right lane pixel indices
        left_lane_inds = []
        right_lane_inds = []

        # Step through the windows one by one
        for window in range(nwindows):
            # Identify window boundaries in x and y (and right and left)
            win_y_low = binary_warped.shape[0] - (window + 1) * window_height
            win_y_high = binary_warped.shape[0] - window * window_height
            win_xleft_low = leftx_current - margin
            win_xleft_high = leftx_current + margin
            win_xright_low = rightx_current - margin
            win_xright_high = rightx_current + margin
            # Identify the nonzero pixels in x and y within the window
            good_left_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) &
                              (nonzerox >= win_xleft_low) & (nonzerox < win_xleft_high)).nonzero()[0]
            good_right_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) &
                               (nonzerox >= win_xright_low) & (nonzerox < win_xright_high)).nonzero()[0]
            # Append these indices to the lists
            left_lane_inds.append(good_left_inds)
            right_lane_inds.append(good_right_inds)
            # If you found > minpix pixels, recenter next window on their mean position
            if len(good_left_inds) > minpix:
                leftx_current = np.int(np.mean(nonzerox[good_left_inds]))
            if len(good_right_inds) > minpix:
                rightx_current = np.int(np.mean(nonzerox[good_right_inds]))

        # Concatenate the arrays of indices
        left_lane_inds = np.concatenate(left_lane_inds)
        right_lane_inds = np.concatenate(right_lane_inds)

        # Extract left and right line pixel positions
        leftx = nonzerox[left_lane_inds]
        lefty = nonzeroy[left_lane_inds]
        rightx = nonzerox[right_lane_inds]
        righty = nonzeroy[right_lane_inds]

        # Fit a second order polynomial to each
        left_fit = np.polyfit(lefty, leftx, 2)
        right_fit = np.polyfit(righty, rightx, 2)

        return left_fit, right_fit, left_lane_inds, right_lane_inds

    def draw_area(self, undist, binary_warped, Minv, left_fit, right_fit):
        # Generate x and y values for plotting
        ploty = np.linspace(0, binary_warped.shape[0] - 1, binary_warped.shape[0])
        left_fitx = left_fit[0] * ploty ** 2 + left_fit[1] * ploty + left_fit[2]
        right_fitx = right_fit[0] * ploty ** 2 + right_fit[1] * ploty + right_fit[2]
        # Create an image to draw the lines on
        warp_zero = np.zeros_like(binary_warped).astype(np.uint8)
        color_warp = np.dstack((warp_zero, warp_zero, warp_zero))

        # Recast the x and y points into usable format for cv2.fillPoly()
        pts_left = np.array([np.transpose(np.vstack([left_fitx, ploty]))])
        pts_right = np.array([np.flipud(np.transpose(np.vstack([right_fitx, ploty])))])
        pts = np.hstack((pts_left, pts_right))

        # Draw the lane onto the warped blank image
        cv2.fillPoly(color_warp, np.int_([pts]), (0, 255, 0))

        # Warp the blank back to original image space using inverse perspective matrix (Minv)
        newwarp = cv2.warpPerspective(color_warp, Minv, (undist.shape[1], undist.shape[0]))
        # Combine the result with the original image
        result = cv2.addWeighted(undist, 1, newwarp, 0.3, 0)
        return result

    def run(self):
        t = Thresholding()
        M, Minv = self.get_M_Minv()

        cap = cv2.VideoCapture(r'C:\Users\0ng\Downloads\03.avi')

        while(cap.isOpened()):
            ret, frame = cap.read()

            # print(frame.shape)
            # plt.imshow(frame)
            # plt.show()
            # self.get_moust(frame)
            # break
            # img = cv2.imread(r'C:\Users\0ng\Desktop\1.png')
            # frame = t.thresholding(frame)
            thresholded_wraped = cv2.warpPerspective(t.thresholding(frame), M, frame.shape[1::-1], flags=cv2.INTER_LINEAR)
            # thresholded_wraped = cv2.warpPerspective(frame, M, frame.shape[1::-1], flags=cv2.INTER_LINEAR)
            left_fit, right_fit, left_lane_inds, right_lane_inds = self.find_line(thresholded_wraped)

            result =  self.draw_area(undist, thresholded_wraped, Minv, left_fit, right_fit)

            cv2.imshow('frame', result)
            if cv2.waitKey(25) & 0xFF == ord('q'):
                break
            break

        cap.release()

        # img = cv2.imread(r"C:\Users\0ng\Desktop\1.png")
        # x_thresh = thresholding(img)
        #
        # cv2.imshow("img", img)
        # cv2.imshow("result", x_thresh)
        cv2.waitKey()
        cv2.destroyAllWindows()


def calibrate(images,grid=(9,6)):
    object_points=[]
    img_points = []
    for img in images:
        object_point = np.zeros( (grid[0]*grid[1],3),np.float32 )
        object_point[:,:2]= np.mgrid[0:grid[0],0:grid[1]].T.reshape(-1,2)
        gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        ret, corners = cv2.findChessboardCorners(gray, grid, None)
        if ret:
            object_points.append(object_point)
            img_points.append(corners)
    return object_points,img_points


def cal_undistort(img, objpoints, imgpoints):
    # Use cv2.calibrateCamera() and cv2.undistort()
    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, img.shape[1::-1], None, None)
    dst = cv2.undistort(img, mtx, dist, None, mtx)
    return dst

object_points,img_points = calibrate(cal_imgs,grid=(9,6))
undist = cal_undistort(cal_imgs[0], object_points, img_points)


if __name__ == '__main__':
    # CV2()
    # test()

    now = Perspective_transform()
    now.run()

